

// How does a throttle work?
// It has to run only two of any controllers at one time
// It needs to start running them when the first one is received
// It needs to start running n more of them as more come in
// But not more than n at a time
// It needs to know when a controller is 'through' its throttled portion
//      So it can tell another controller to get going
// It cannot wait for a function to return because the function may
//      make asynchronous calls.
// It should ideally go away once all controllers are done
//      But it doesn't  know what controllers might enter it in the future
//      So it always has to stay open waiting for another controller
// It needs to avoid interfering with other throttles
//      Or put another way, it needs to support multiple throttle points
// If an exit callback is called, you need to inform the throttle becuase
//      user throttle off won't be called.

// What if all throttles had a checkThrottle() method that returned true
// or false if they were throttled up or down.
// Still doesn't handle the how does the throttle know when it is done problem

// Gigabytes is size of cluster in GB.
// Recovery rate is KB/sec of recovery.
// Return hours 
function calculateTime(gigabytes, recoveryRate) {
    var kbs = gigabytes * 1024 * 1024, 
        seconds = kbs/recoveryRate;
    return seconds / 60 / 60;
}

// Returns 28 hours
console.log(calculateTime(2000, 25 * 1024));

