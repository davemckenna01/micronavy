/*global require, process, console */

// Example with some advanced usage, like error callbacks, scpOptions,
// and config task command line arguments rewriting, using localhost as
// a 'remote' machine.

var control = require('../'),
    task = control.task,
    script = process.argv[1],
    scpTest = 'controlScpTest';

function configure(addresses) {
    var config = {
        user: process.env.USER,
        scpOptions: ['-v']
    };
    return control.hosts(config, addresses); 
}

task('myclusterxt', 'Config for my cluster', function () {
    var shared, host, hosts =[];
    
    shared = Object.create(controller);
    shared.user = process.env.USER
    shared.scpOptions = ['-v'];

    host = Object.create(shared);
    host.address = 'foo.example.com';
    host.ips = [
        '10.2.136.18',
        '10.2.136.19',
        '10.2.136.20',
        '10.2.136.21',
        '10.2.136.22' 
    ];
    hosts.push(host);

    host = Object.create(shared);
    host.address = 'bar.example.com';
    host.ips = [ 
        '10.2.136.23',
        '10.2.136.24',
        '10.2.136.25',
        '10.2.136.26',
        '10.2.136.27' 
    ];
    hosts.push(host);

    return hosts;
});

task('myclusterx', 'Config for my cluster', function () {
    var shared = {
            user: process.env.USER,
            scpOptions: ['-v']
        }, host, hosts = [];
    
    shared = makeHost(shared);
    host = Object.create(shared);
    host.address = 'foo.example.com';
    host.ips = [
        '10.2.136.18',
        '10.2.136.19',
        '10.2.136.20',
        '10.2.136.21',
        '10.2.136.22' 
    ];
    hosts.push(host);

    host = Object.create(shared);
    host.address = 'bar.example.com';
    host.ips = [ 
        '10.2.136.23',
        '10.2.136.24',
        '10.2.136.25',
        '10.2.136.26',
        '10.2.136.27' 
    ];
    hosts.push(host);

    return hosts;
});

task('myclusterxr', 'Config for my cluster', function () {
    var shared = {
            user: process.env.USER,
            scpOptions: ['-v']
        }, host, app, db, hosts = [];
    
    shared = makeHost(shared);
    app = Object.create(shared);
    app.role = 'app';

    host = Object.create(app);
    host.address = 'foo.example.com';
    host.ips = [
        '10.2.136.18',
        '10.2.136.19',
        '10.2.136.20',
        '10.2.136.21',
        '10.2.136.22' 
    ];
    hosts.push(host);

    host = Object.create(app);
    host.address = 'bar.example.com';
    host.ips = [ 
        '10.2.136.23',
        '10.2.136.24',
        '10.2.136.25',
        '10.2.136.26',
        '10.2.136.27' 
    ];
    hosts.push(host);

    db = makeHost(shared);
    db.role = 'role';

    host = Object.create(db);
    host.address = 'other.example.com';
    host.dbUser = 'pgsql';
    hosts.push(host);

    return hosts;
});


task('myclusterx', 'Config for my cluster', function () {
    var config = {
            user: process.env.USER,
            scpOptions: ['-v']
        },
        addresses = ['foo.example.com',
                     'bar.example.com'],
        hosts = control.hosts(config, addresses); 

    hosts['foo.example.com'].ips = [
        '10.2.136.18',
        '10.2.136.19',
        '10.2.136.20',
        '10.2.136.21',
        '10.2.136.22' 
    ];

    hosts['bar.example.com'].ips = [ 
        '10.2.136.23',
        '10.2.136.24',
        '10.2.136.25',
        '10.2.136.26',
        '10.2.136.27' 
    ];

    return hosts;
});

task('myclusterhalfway', 'Config for my cluster', function () {
    var options = {
            user: process.env.USER,
            scpOptions: ['-v']
        },
        addresses = {
            'foo.example.com': {
                ips: [
                    '10.2.136.18',
                    '10.2.136.19',
                    '10.2.136.20',
                    '10.2.136.21',
                    '10.2.136.22' 
                ],
                cron: 'cron'
            },
            'bar.example.com': {
                ips: [
                    '10.2.136.23',
                    '10.2.136.24',
                    '10.2.136.25',
                    '10.2.136.26',
                    '10.2.136.27' 
                ],
                cron: 'cronx'
            }
        };
    return control.hosts(options, addresses); 
});

task('myclusterxa', 'Config for my cluster', function () {
    var config = {
            user: process.env.USER,
            scpOptions: ['-v']
        },
        addresses = ['foo.example.com',
                     'bar.example.com'],
        hosts = control.hosts(config, addresses); 

    hosts[0].ips = [
        '10.2.136.18',
        '10.2.136.19',
        '10.2.136.20',
        '10.2.136.21',
        '10.2.136.22' 
    ];

    hosts[1].ips = [ 
        '10.2.136.23',
        '10.2.136.24',
        '10.2.136.25',
        '10.2.136.26',
        '10.2.136.27' 
    ];

    return hosts;
});

task('myclusterz', 'Config for my cluster', function () {
    var config = {
            user: process.env.USER,
            scpOptions: ['-v']
        },
        addresses = ['foo.example.com',
                     'bar.example.com'],
        hosts = control.hosts(config, addresses); 

    hosts[addresses[0]].ips = [
        '10.2.136.18',
        '10.2.136.19',
        '10.2.136.20',
        '10.2.136.21',
        '10.2.136.22' 
    ];

    hosts[addresses[1]].ips = [ 
        '10.2.136.23',
        '10.2.136.24',
        '10.2.136.25',
        '10.2.136.26',
        '10.2.136.27' 
    ];

    return hosts;
});

task('myclustery', 'Config for my cluster', function () {
    var config = {
            user: process.env.USER,
            scpOptions: ['-v']
        },
        addresses = [
                { 'address': 'foo.example.com',
                    'options': {
                        'ips': [
                            '10.2.136.18',
                            '10.2.136.19',
                            '10.2.136.20',
                            '10.2.136.21',
                            '10.2.136.22'
                        ]
                    }
                },

                    { 'address': 'bar.example.com',
                        'options': {
                            'ips': [
                                '10.2.136.23',
                                '10.2.136.24',
                                '10.2.136.25',
                                '10.2.136.26',
                                '10.2.136.27'
                            ]
                        }
                    }
                    ];
    return control.hosts(config, addresses); 
});


task('mycluster', 'Config for my cluster', function () {
    return configure([ 'localhost' ]); // Expand array to create cluster
});

task('myhost', 'Config for a single host from command line', function (args) {
    return configure([args.shift()]); // From command line arguments rewriting
});

function doTest(host, code, callback, exitCallback) {
    code = code || 0; 
    host.ssh('node ' + script + ' mycluster arbexit ' + code,
            callback, exitCallback);
}

// Task to perform 'remote' call requesting 'remote' to exit arbitrarily
task('test', 'Test task', function (host, code) {

    function callback() {
        console.log('Regular callback activated for ' + host.address);
    }

    function exitCallback(exit) {
        console.log('Exit callback activated for ' + host.address +
        ' with exit code ' + exit);
    }

    doTest(host, code, callback, exitCallback);
});

// Task that will run on 'remote' to exit with an arbitrary code
task('arbexit', 'Arbitrary exit', function (host, code) {
    code = code || 0; 
    console.log("Exiting with code " + code);
    process.exit(code);
});

task('scp', 'Test scp options', function (host) {
    var flag = host.scpOptions.pop();
    host.scp(script, scpTest); // Quietly 
    host.scpOptions.push(flag);
    host.scp(script, scpTest); // Verbosely
});

task('clean', 'Remove file transferred in scp testing', function (host) {
    host.ssh('rm ' + scpTest); 
});

control.begin();

// Run like:
// node mycontroller.js mycluster test 0 
// node mycontroller.js mycluster test 64 
// node mycontroller.js mycluster scp
// node mycontroller.js mycluster clean
// node mycontroller.js myhost 127.0.0.1 test 0 
