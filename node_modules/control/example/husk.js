// Does not work and never will because there is no method_missing equivalent in Javasript to forward all calls, including those that were never defined on the object that are on or may come onto the prototype in the future.

/*global require, exports, process, console */

/*jslint nomen: false */

var d, e, f;

function husk(b, a) {
    var prop, descriptor = {}, b2a;
    for (prop in b) {
        if (b.hasOwnProperty(prop)) {
            descriptor[prop] = Object.getOwnPropertyDescriptor(b, prop);
        }
    }
    b2a = Object.create(a, descriptor);
    console.log('down ' + b2a.x);
    for (prop in b) {
        if (b.hasOwnProperty(prop)) {
            console.log('doing for prop ' + prop);
            delete b[prop];
            b.__defineGetter__(prop, function () {
                console.log('mid' + Object.getPrototypeOf(b2a));
                return b2a[prop];
                // return b2a;
            });
            b.__defineSetter__(prop, function (arg) {
                b2a[prop] = arg;
            });
        }
        console.log('upa ' + b.x);
        console.log('upb ' + b[prop]);
    }
}

d = {};
d.x = 7;

e = {};
e.y = 8;

f = {};
f.z = 9;

husk(e, d);
husk(f, e);

console.log(f.x);
console.log(f.y);
console.log(f.z);
