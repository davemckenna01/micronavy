task('mycluster', 'Config for my cluster', function () {
    var shared = Object.create(control.controller); 
    shared.enhance(['ejs', 'fpro', 'ecr']); // Need method to trigger logic
    shared.enhance = ['ejs', 'fpro', 'ecr']; // Only with defined setter

    var config = {
        'a.domain.com': {
            enhance = ['ejs'];
        },
        'b.domain.com': {

        }
    }
}

function enhance(enhancements) {
    var i, l, f;
    for (i = 0, l = enhancements.length; i < l; i += 1) {
        enhancement = enhancements[i];

        try { 
            enhancement = require('control-' + enhancement);
        } catch (e) {
            if (e.message && e.message.match(/Cannot find module/)) {
                // Get it from the directory of script execution control/ejs
                module.exports = require('./node-control');
            } else {
                throw e;
            }
        }

        // Slap all the methods experted by the enhancement onto the controller
        for (f in enhancement) {
            this[f.name] = f;
        }
    }
}

var stack = []; // two kinds of events - sequence called, or upload finishes

function next() {
    if (stack is not empty) {
        item = stack.shift();
        item.upload();
    }
}

function sequence(upload, proceed) {
    var item = {};
    step = item.upload;
    proceed = item.proceed;
    stack.push(item);
}

task('sequence', 'Upload file one controller at a time', function(controller) {
    function upload()  {
        controller.scp('a', 'b', function () {
            next();
        };
    }

    function proceed() {
        controller.ssh('ls');
    }

    sequence(upload, proceed);
    // Each controller 
}


var queue = {}, queued = [];

var push(callback) {
    queued.push(callback);
}

var start() {

}


queue(callback) {
    queue.push(callback);
    if (!queue.started) {
        queue.start();
    }
}



task('queue', 'Upload file one controller at a time', function(controller) {
    queue(function () {
        controller.scp('a, 'b', function () {
            queue.done();
            controller.ssh('ls');
        });
    }

}

task('sequence', 'Upload file one controller at a time', function(controller) {
    controller.scpSync('a', 'b', function () {
        controller.ssh('ls');
    };


    sequence(upload, proceed);
    // Each controller 
}

task('throttle', 'Allow only n controllers to operate simulataneously', 
        function(controller) {
    controller.throttle.on('upload', 2, function () {
        controller.scp('a', 'b', function () {
            controller.ssh('ls');
        });
    });
});

task('waiton', 'Allow only n controllers to operate simulataneously', 
        function(controller) {
    controller.wait.on('upload', function () {
        controller.ssh('ls');
    });
});

// Allow two controllers at a time to do the scp simultaneously and then all
// controllers wait until all controllers are done with the upload to proceed
// with the ssh all simultaneously.
task('combined', 'Allow only n controllers to operate simulataneously', 
        function(controller) {
    function callback(code) {
        controller.throttle.off('upload');
        if (code === 0) {
            controller.wait.on('upload', function () {
                controller.ssh('ls');
            });
        }
    }

    controller.throttle.on('upload', 2, function () {
        controller.scp('a', 'b', callback, callback);
    });
});


task('sequence', 'Upload file one controller at a time', function(controller) {
    controller.scpSync('a', 'b', function () {
        controller.ssh('ls');
    };


    sequence(upload, proceed);
    // Each controller 
}

task('config:sshd', 'Confgure sshd from template', function (controller) {
    controller.template('~/sshd_template.ejs', '/etc/ssh/sshd_config', 
            function () {
    
    });
}
