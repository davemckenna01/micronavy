/*global require, process, console, ReadableStream */

// Example with some advanced usage, like error callbacks, scpOptions,
// and config task command line arguments rewriting, using localhost as
// a 'remote' machine.

var control = require('../'),
    stream = require('stream'),
    task = control.task;

task('stream', 'Stream example', function (controller) {
    var stdout, stderr;

    stdout = controller.stdout = new stream.ReadableStream();
    stdout.on('data', function (data) {
        // Do what you want with the data
        // Or collect it for later
    });
    stdout.on('end', function () {
       // Optionally trigger on other stream event instead of callbacks
    });

    stderr = controller.stderr = new ReadableStream(); // Can also follow stderr

    controller.ssh('date',
        function () {}, // Do what you need on success }
        function () {}  // Do what you need on non-zero exit }
    );
});

// But you already have a stream - the stream coming back from spawn, so
// really you want to pass additional event handlers, not create a stream
task('streamx', 'Stream example', function (controller) {
    var stdout, stderr;

    controller.stdout.on('data', function (data) {
        // Do what you want with the data
        // Or collect it for later
    });
    controller.stdout.on('end', function () {
       // Optionally trigger on other stream event instead of callbacks
    });

    controller.stderr.on('data', function (data) {}); // Can also follow stderr

    controller.ssh('date',
        function () {}, // Do what you need on success }
        function () {}  // Do what you need on non-zero exit }
    );
});

// But you already have a stream - the stream coming back from spawn, so
// really you want to pass additional event handlers, not create a stream
task('streamp', 'Stream example', function (controller) {
    var stdout, stderr, response = '';

    controller.stdout.on('data', function (data) {
        console.log('Custom listerner called for ' + controller.address);
        response = response += data.toString();
    });

    controller.ssh('date', function () {
        console.log('Response seen by custom listener for ' + 
                controller.id() + ': ' + response);
        if (response === 'x') {
            console.log('Response as expected');
        } else {
            console.log('Response not as expected');
        }
        controller.ssh('date'); // Custom listener is now cleared
    });
});

task('streampi', 'Stream example', function (controller) {
    var stdout = '', stderr = '';

    controller.stdout.on('data', function (data) {
        console.log('Custom stdout listerner called for ' + controller.address);
        stdout = stdout += data.toString();
    });

    controller.stderr.on('data', function (data) {
        console.log('Custom stderr listerner called for ' + controller.address);
        stderr = stderr += data.toString();
    });

    controller.ssh('test', function () {
        console.log('Response seen by custom listener for ' + 
                controller.id() + ': \n' + response);
        console.log('Response seen by custom listener for ' + 
                controller.id() + ': \n' + response);
        controller.ssh('test'); // Custom listener is now cleared
    });
});

require('./controls.js'); 
