/*global require, process, console */

// Examples from README in .js file - not functional.

// QUICK EXAMPLE

var control = require('control'),
    task = control.task;

task('mycluster', 'Config for my cluster', function () {
    var config = {
        'a.domain.com': {
            user: 'alogin'
        },
        'b.domain.com': {
            user: 'blogin',
            sshOptions: ['-p 44'] // sshd daemon on non-standard port
        }
    };

    return control.controllers(config);
});

task('date', 'Get date', function (controller) {
    controller.ssh('date');
});

control.begin();



// CONFIG TASKS

task('mycluster', 'Config for my cluster', function () {
    var shared = Object.create(control.controller),
        config = {
            'a.domain.com': {
                user: 'alogin'
            },
            'b.domain.com': {
                user: 'blogin'
            }
        };

    shared.sshOptions = ['-p 44'];

    return control.controllers(config, shared);
});

task('mycluster', 'Config for my cluster', function () {
    var shared = Object.create(control.controller), 
        addresses = [ 'a.domain.com',
                      'b.domain.com',
                      'c.domain.com' ];
    shared.user = 'mylogin'; 
    shared.sshOptions = ['-p 44'];
    return control.controllers(addresses, shared);
});

task('mycluster', 'Config for my cluster', function () {
    var controllers = [],
        shared = Object.create(control.controller), // Extend prototype 
        a, b;

    shared.sshOptions = ['p 44'];

    a = Object.create(shared); // Extend shared prototype
    a.address = 'a.domain.com';
    a.user = 'alogin'; 
    controllers.push(a);

    b = Object.create(shared);
    b.address = 'b.domain.com';
    b.user = 'blogin'; 
    controllers.push(b);

    return controllers;
});


// CONTROLLERS

var controller = Object.create(control.controller);
controller.address = 'a.domain.com';
controller.user = 'mylogin';
controller.ips = [
        '10.2.136.23',
        '10.2.136.24',
        '10.2.136.25',
        '10.2.136.26',
        '10.2.136.27' 
    ];



// ROLES

task('mycluster', 'Config for my cluster', function () {
    var dbs = Object.create(control.controller),
        apps = Object.create(control.controller);

    dbs = {
        user: 'dbuser',
        role: 'db'
    };

    apps = {
        user: 'appuser',
        role: 'app'
    };

    dbs = control.controllers(['db1.domain.com', 'db2.domain.com'], dbs);
    apps = control.controllers(['app1.domain.com', 'app2.domain.com'], apps);

    return dbs.concat(apps); 
});

task('deploy', 'Deploy my system', function (controller, release) {
    if (controller.role === 'db') {
        // Do db deploy work
    }

    if (controller.role === 'app') {
        // Do app deploy work
    }
});


// LOGS

task('mycluster', 'Config for my cluster', function () {
    var shared, addresses;
    shared = {
        user: 'mylogin',
        logPath: '~/mycluster-control.log'
    };
    addresses = [ 'a.domain.com',
                  'b.domain.com',
                  'c.domain.com' ];
    return control.controllers(addresses, shared); 
});


// CONFIG TASK COMMAND LINE ARGUMENTS REWRITING

function configure(addresses) {
    var shared;
    shared = {
        user: 'mylogin'
    };
    return control.controllers(addresses, shared); 
}

task('mycluster', 'Config for my cluster', function () {
    var addresses = [ 'a.domain.com',
                      'b.domain.com',
                      'c.domain.com' ];
    return configure(addresses); 
});

task('mymachine', 'Config for one machine from command line', function (args) {
    return configure([args.shift()]); // From command line arguments rewriting
});

task('ondate', 'Different logic paths based on date', function (controller) {
    var datestring = '';

    controller.stdout.on('data', function (chunk) {
        datestring += chunk.toString();
    });

    controller.ssh('date', function () {
        console.log('  Date string is ' + datestring);
        // Further logic dependent on value of datestring
    });
});

task('stdin', 'Test controller stdin usage', function (controller) {
    var stdout;

    controller.stdout.on('data', function (chunk) {
        chunk = chunk.toString(); // Assumes chunks come in full lines
        if (chunk.match('^Enter data')) { // Assumes command has this prompt
            controller.stdin.write('hello\n');
        }
    });

    controller.ssh('acommand');
});

